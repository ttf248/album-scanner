name: Build and Package

on:
  push:
    branches:
      - main
  release:
    types: [created]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      # 检出代码
      - name: Checkout code
        uses: actions/checkout@v3

      # 设置 Python 环境
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      # 安装依赖
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pyinstaller

      # 打包为可执行文件
      - name: Build executable
        run: |
          pyinstaller --onefile main.py

      # 上传构建工件
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: album-scanner-${{ matrix.os }}
          path: dist/main${{ matrix.os == 'windows-latest' && '.exe' || '' }}

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # 检出代码
      - name: Checkout code
        uses: actions/checkout@v3

      # 下载构建工件
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: album-scanner-ubuntu-latest
          path: ./dist/ubuntu
      - uses: actions/download-artifact@v4
        with:
          name: album-scanner-windows-latest
          path: ./dist/windows

      # 发布 Release（直接发布）
      - name: Publish Release
        run: |
          gh release create ${{ github.event.release.tag_name }} ./dist/ubuntu/main ./dist/windows/main.exe --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            ./dist/windows/main.exe
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true

      # 发布 Release（将草稿标记为正式发布）
      - name: Publish Release
        run: |
          gh release edit ${{ github.event.release.tag_name }} --draft=false --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
